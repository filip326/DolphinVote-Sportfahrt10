{"version":3,"file":"VoteView-279e765b.js","sources":["../../../src/views/VoteView.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { stringify } from 'querystring';\nimport { VotingResponse, OptionResponse, ResultResponse, VotingType } from './types/vote';\n</script>\n\n<script lang=\"ts\">\nexport default {\n    data: () => ({\n        votings: [] as { voting: string, open: boolean }[],\n        results: {} as { [key: string]: string | undefined },\n        options: {} as { [key: string]: { id: string, name: string }[] },\n        success: {} as { [key: string]: boolean },\n        values: {} as { [key: string]: [string, string, string] },\n        optionsLoadButton: {} as { [key: string]: { loading?: boolean } },\n        submitButton: {} as { [key: string]: { loading?: boolean } }\n    }),\n    methods: {\n        async getVotings() {\n            const response = await fetch(\"/votings\");\n            if (response.status === 401) {\n                this.$router.push(\"/\");\n                return;\n            }\n            this.votings = (await response.json() as { voting: string, open: boolean }[])\n\n            for (let voting of this.votings) {\n                this.values[voting.voting] = ['', '', ''];\n                this.optionsLoadButton[voting.voting] = { loading: false};\n                this.submitButton[voting.voting] = { loading: false };\n                this.success[voting.voting] = false;\n            }\n\n        },\n\n        async getResults() {\n            const response = await fetch(\"/result\");\n            if (response.status === 401) {\n                this.$router.push(\"/\");\n                return;\n            }\n\n            // const results = await response.json() as { [key: string]: string };\n            // this.results = results;\n        },\n\n        async getOptions(time: string) {\n            const response = await fetch(`/options?time=${time}`);\n            if (response.status === 401) {\n                this.$router.push(\"/\");\n                return;\n            }\n\n            const options = await response.json() as { id: string, name: string }[];\n            console.table(options);\n            this.options[time] = options;\n        },\n\n        async submit(time: string) {\n            // set loading\n            this.submitButton[time] = { loading: true };\n\n            // check if all options are selected\n            if (this.values[time][0] === '' || this.values[time][1] === '' || this.values[time][2] === '') {\n                this.submitButton[time] = { loading: false };\n                return;\n            }\n\n            // make ids out of the option names\n            const answersAsIds = this.values[time].map(v => this.options[time].find(o => o.name === v)?.id);\n\n            // check if all options are valid ids in the options array\n            if (!this.options[time].map(v => v.id).includes(answersAsIds[0] ?? \"\") || !this.options[time].map(v => v.id).includes(answersAsIds[1] ?? \"\") || !this.options[time].map(v => v.id).includes(answersAsIds[2] ?? \"\")) {\n                this.submitButton[time] = { loading: false };\n                alert(\"Du hast eine ungültige Option gewählt!\");\n                return;\n            }\n\n            // check if all options are different\n            if (this.values[time][0] === this.values[time][1] || this.values[time][0] === this.values[time][2] || this.values[time][1] === this.values[time][2]) {\n                this.submitButton[time] = { loading: false };\n                alert(\"Du musst drei verschiedene Optionen wählen!\");\n                return;\n            }\n\n            // send request\n            const response = await fetch(`/vote?time=${time}`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify([\n                    answersAsIds[0],\n                    answersAsIds[1],\n                    answersAsIds[2]\n                ])\n            });\n\n            // check if request was successful\n            if (response.status !== 200) {\n                this.$router.push(\"/error\");\n                return;\n            }\n\n            // reset loading\n            this.submitButton[time] = { loading: false };\n\n\n            this.options[time] = [];\n            // delete options\n            delete this.options[time];\n\n            // set success to true\n            this.success[time] = true;\n        }\n\n    },\n    async beforeMount() {\n        await this.getVotings();\n        await this.getResults();\n        console.log(\"Everything parsed\")\n        console.table(this.votings)\n        console.log(this.results)\n    }\n}\n</script>\n\n<template>\n    <v-card v-for=\"voting in votings\">\n        <v-card-title>{{ voting.voting }}</v-card-title>\n        <v-card-subtitle v-if=\"voting.open\">Jetzt wählen</v-card-subtitle>\n        <v-card-subtitle v-else>Du kannst hier nicht mehr wählen</v-card-subtitle>\n        <!-- if voting.open and there are some options for the voting -->\n        <v-card-text v-if=\"voting.open && options[voting.voting] !== undefined && options[voting.voting].length > 0\">\n            <div class=\"choice\">\n                <v-select\n                    :items=\"options[voting.voting].map(v => v.name)\"\n                    label=\"1. Wunsch\"\n                    v-model=\"values[voting.voting][0]\"></v-select>\n            </div>\n            <div class=\"choice\">\n                <v-select\n                    :items=\"options[voting.voting].filter(v => v.name !== values[voting.voting][0]).map(v => v.name)\"\n                    label=\"2. Wunsch\"\n                    v-model=\"values[voting.voting][1]\"></v-select>\n            </div>\n            <div class=\"choice\">\n                Drittwahl:\n                <v-select\n                    :items=\"options[voting.voting].filter(v => v.name !== values[voting.voting][0] && v.name !== values[voting.voting][1]).map(v => v.name)\"\n                    label=\"3. Wunsch\"\n                    v-model=\"values[voting.voting][2]\"></v-select>\n            </div>\n        </v-card-text>\n        <!-- success message -->\n        <v-card-text v-if=\"success[voting.voting]\">\n            Deine Wahl wurde erfolgreich gespeichert.\n        </v-card-text>\n\n        <!-- wahl locked message -->\n        <v-card-text v-if=\"!voting.open && !success[voting.voting] && !results[voting.voting]\">\n            Du kannst hier nicht, noch nicht oder nicht mehr wählen.\n        </v-card-text>\n\n        <!-- result -->\n        <v-card-text v-if=\"results[voting.voting]\">\n            Dein zugeteiltes Projekt: {{ results[voting.voting] }}\n        </v-card-text>\n\n        <!-- if voting is open but there are no options for the voting -->\n        <v-card-text\n            v-if=\"voting.open && (!options[voting.voting] || options[voting.voting].length === 0) && !success[voting.voting] && !results[voting.voting]\">\n            <v-btn @click=\"getOptions(voting.voting)\" :loading=\"optionsLoadButton[voting.voting].loading\">Optionen\n                laden</v-btn>\n        </v-card-text>\n        <!-- if voting is open, there are options and all options are selected, show a submit button -->\n        <v-card-actions\n            v-if=\"voting.open && options[voting.voting] !== undefined && options[voting.voting].length > 0\">\n            <v-btn @click=\"submit(voting.voting)\">Absenden</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>"],"names":["__default__","response","voting","time","options","answersAsIds","v","_a","o"],"mappings":"iLAMAA,EAAe,CACX,KAAM,KAAO,CACT,QAAS,CAAC,EACV,QAAS,CAAC,EACV,QAAS,CAAC,EACV,QAAS,CAAC,EACV,OAAQ,CAAC,EACT,kBAAmB,CAAC,EACpB,aAAc,CAAC,CAAA,GAEnB,QAAS,CACL,MAAM,YAAa,CACT,MAAAC,EAAW,MAAM,MAAM,UAAU,EACnC,GAAAA,EAAS,SAAW,IAAK,CACpB,KAAA,QAAQ,KAAK,GAAG,EACrB,OAEC,KAAA,QAAW,MAAMA,EAAS,KAAK,EAE3B,QAAAC,KAAU,KAAK,QACpB,KAAK,OAAOA,EAAO,MAAM,EAAI,CAAC,GAAI,GAAI,EAAE,EACxC,KAAK,kBAAkBA,EAAO,MAAM,EAAI,CAAE,QAAS,IACnD,KAAK,aAAaA,EAAO,MAAM,EAAI,CAAE,QAAS,IACzC,KAAA,QAAQA,EAAO,MAAM,EAAI,EAGtC,EAEA,MAAM,YAAa,CAEX,IADa,MAAM,MAAM,SAAS,GACzB,SAAW,IAAK,CACpB,KAAA,QAAQ,KAAK,GAAG,EACrB,OAKR,EAEA,MAAM,WAAWC,EAAc,CAC3B,MAAMF,EAAW,MAAM,MAAM,iBAAiBE,GAAM,EAChD,GAAAF,EAAS,SAAW,IAAK,CACpB,KAAA,QAAQ,KAAK,GAAG,EACrB,OAGE,MAAAG,EAAU,MAAMH,EAAS,OAC/B,QAAQ,MAAMG,CAAO,EAChB,KAAA,QAAQD,CAAI,EAAIC,CACzB,EAEA,MAAM,OAAOD,EAAc,CAKnB,GAHJ,KAAK,aAAaA,CAAI,EAAI,CAAE,QAAS,EAAK,EAGtC,KAAK,OAAOA,CAAI,EAAE,CAAC,IAAM,IAAM,KAAK,OAAOA,CAAI,EAAE,CAAC,IAAM,IAAM,KAAK,OAAOA,CAAI,EAAE,CAAC,IAAM,GAAI,CAC3F,KAAK,aAAaA,CAAI,EAAI,CAAE,QAAS,EAAM,EAC3C,OAIJ,MAAME,EAAe,KAAK,OAAOF,CAAI,EAAE,IAASG,GAAA,OAAA,OAAAC,EAAA,KAAK,QAAQJ,CAAI,EAAE,KAAKK,GAAKA,EAAE,OAASF,CAAC,IAAzC,YAAAC,EAA4C,GAAE,EAG1F,GAAA,CAAC,KAAK,QAAQJ,CAAI,EAAE,IAAIG,GAAKA,EAAE,EAAE,EAAE,SAASD,EAAa,CAAC,GAAK,EAAE,GAAK,CAAC,KAAK,QAAQF,CAAI,EAAE,IAAIG,GAAKA,EAAE,EAAE,EAAE,SAASD,EAAa,CAAC,GAAK,EAAE,GAAK,CAAC,KAAK,QAAQF,CAAI,EAAE,IAAIG,GAAKA,EAAE,EAAE,EAAE,SAASD,EAAa,CAAC,GAAK,EAAE,EAAG,CAChN,KAAK,aAAaF,CAAI,EAAI,CAAE,QAAS,EAAM,EAC3C,MAAM,wCAAwC,EAC9C,OAIJ,GAAI,KAAK,OAAOA,CAAI,EAAE,CAAC,IAAM,KAAK,OAAOA,CAAI,EAAE,CAAC,GAAK,KAAK,OAAOA,CAAI,EAAE,CAAC,IAAM,KAAK,OAAOA,CAAI,EAAE,CAAC,GAAK,KAAK,OAAOA,CAAI,EAAE,CAAC,IAAM,KAAK,OAAOA,CAAI,EAAE,CAAC,EAAG,CACjJ,KAAK,aAAaA,CAAI,EAAI,CAAE,QAAS,EAAM,EAC3C,MAAM,6CAA6C,EACnD,OAiBA,IAba,MAAM,MAAM,cAAcA,IAAQ,CAC/C,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,UAAU,CACjBE,EAAa,CAAC,EACdA,EAAa,CAAC,EACdA,EAAa,CAAC,CAAA,CACjB,CAAA,CACJ,GAGY,SAAW,IAAK,CACpB,KAAA,QAAQ,KAAK,QAAQ,EAC1B,OAIJ,KAAK,aAAaF,CAAI,EAAI,CAAE,QAAS,EAAM,EAGtC,KAAA,QAAQA,CAAI,EAAI,GAEd,OAAA,KAAK,QAAQA,CAAI,EAGnB,KAAA,QAAQA,CAAI,EAAI,EACzB,CAEJ,EACA,MAAM,aAAc,CAChB,MAAM,KAAK,aACX,MAAM,KAAK,aACX,QAAQ,IAAI,mBAAmB,EACvB,QAAA,MAAM,KAAK,OAAO,EAClB,QAAA,IAAI,KAAK,OAAO,CAC5B,CACJ"}